import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_input(msg,type):
    theinputvalue=input(msg).lower()
    if theinputvalue not in ['chicago'.lower(),'new york city'.lower(),'washington'.lower()] and type == "city":
        print("Wrong city")
        return
    elif theinputvalue not in ['january'.lower(), 'february'.lower(), 'march'.lower(), 'april'.lower(), 'may'.lower(), 'june'.lower(),'all'.lower()] and type == "month":
        print("Wrong month")
        return
    elif theinputvalue not in ['sunday'.lower(),'monday'.lower(),'tuesday'.lower(),'wednesday'.lower(),'thursday'.lower(),'friday'.lower(),'saturday'.lower(),'all'.lower()] and type == "day":
        print("Wrong day")
        return
    return theinputvalue

def get_filters():
    city = get_input("Enter city name: ","city")
    if not city:
        return "","",""
    month = get_input("Enter month: ","month")
    if not city:
        return "","",""
    day = get_input("Enter day: ","day")
    if not city:
        return "","",""
    
    print(" City Entered is : " , city)
    print(" Month Entered is : " , month)
    print(" Day Entered is : " , day)
    
    
    #Asks user to specify a city, month, and day to analyze.
    
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs


    # TO DO: get user input for month (all, january, february, ... , june)


    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)


    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv(CITY_DATA[city])
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.weekday_name
    df['hour'] = df['Start Time'].dt.hour
    
    if month == 'all' or not month:
        #continue
        print("All months")
    else:
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1
        df = df[df['month'] == month]

    if day == 'all' or not day:
        #continue
        print("All days")
    else:
        df = df[df['day_of_week'] == day.title()]

    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    popular_month = df['month'].mode()[0]
    print('Most Popular Month:', popular_month)

    # TO DO: display the most common day of week
    popular_day_of_week = df['day_of_week'].mode()[0]
    print('most common day of week:', popular_day_of_week)

    # TO DO: display the most common start hour
    popular_common_start_hour = df['hour'].mode()[0]

    print('most common start hour:', popular_common_start_hour)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    popular_start_station = df['Start Station'].mode()[0]
    print('Most Start Station:', popular_start_station)

    # TO DO: display most commonly used end station
    popular_end_station = df['End Station'].mode()[0]

    print('Most End Station:', popular_end_station)


    # TO DO: display most frequent combination of start station and end station trip
    group_field = df.groupby(['Start Station','End Station'])
    popular_combination_station = group_field.size().sort_values(ascending=False).head(1)
    print('Most frequent combination of Start Station and End Station trip:', popular_combination_station)


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    total_travel_time = df['Trip Duration'].sum()
    print('Total Travel Time:', total_travel_time)


    # TO DO: display mean travel time
    mean_travel_time = df['Trip Duration'].mean()

    print('Mean Travel Time:', mean_travel_time)


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df,city):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    print('User Type Stats:')
    print(df['User Type'].value_counts())

    if city in ['chicago', 'new york city']:
        # TO DO: Display counts of gender
        print('Gender Stats:', df['Gender'].value_counts())
        # TO DO: Display earliest, most recent, and most common year of birth
        print('Birth Year Stats:')
        print('Most Common Year:',df['Birth Year'].mode()[0])
        print('Most Recent Year:',df['Birth Year'].max())
        
    print("\nThis took %s seconds." % (time.time() - start_time))             
    print('-'*40)

def main():
    while True:
        city, month, day = get_filters()
        
        if not city or not month or not day:
            print("Invalid entries, please enter valid filters")
        else:
            df = load_data(city, month, day)
            time_stats(df)
            station_stats(df)
            trip_duration_stats(df)
            user_stats(df,city)
            rows=0;
            lengthofcity = len(pd.read_csv(CITY_DATA[city]).index)
            for x in range(lengthofcity):
                print(df[rows:rows + 5])
                showmorerows = input('show more data (yes/no).\n')
                rows+=5
                if showmorerows.lower() == 'no':
                    break

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break
           


if __name__ == "__main__":
	main()
